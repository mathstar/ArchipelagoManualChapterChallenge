"""Generator for hooks.py file."""

from typing import Any, Dict

from .base_generator import BaseGenerator


class HooksGenerator(BaseGenerator):
    """Generates the hooks.py file for Archipelago Manual integration."""
    
    def get_output_filename(self) -> str:
        """Get the output filename."""
        return "hooks.py"
    
    def generate(self) -> str:
        """Generate hooks.py content as a string (not JSON)."""
        game_name = self._sanitize_name(self.game_definition.name)
        
        hooks_content = f'''"""
Hooks for {self.game_definition.name} - Generated by APMCC
"""

from worlds.manual.hooks import HookSet


class {game_name}Hooks(HookSet):
    """Hook set for {self.game_definition.name}."""
    
    def before_generate_basic(self) -> None:
        """Called before basic generation."""
        pass
    
    def after_generate_basic(self) -> None:
        """Called after basic generation."""
        pass
    
    def before_fill(self) -> None:
        """Called before item fill."""
        # Set up any special logic for item placement
        pass
    
    def after_fill(self) -> None:
        """Called after item fill."""
        pass
    
    def before_create_items(self) -> None:
        """Called before items are created."""
        pass
    
    def after_create_items(self) -> None:
        """Called after items are created."""
        pass


# Export the hooks class
hooks = {game_name}Hooks
'''
        return hooks_content
    
    def write_to_file(self, output_dir):
        """Override to write Python file instead of JSON."""
        from ..utils.file_utils import ensure_directory
        
        content = self.generate()
        output_path = output_dir / self.get_output_filename()
        ensure_directory(output_path.parent)
        
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        return output_path